generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")  
}

model User {
  id            Int             @id @default(autoincrement())
  username      String          @unique
  pwdHash       String
  nickname      String
  image         String
  description   String?
  role          Role            @default(USER)
  comments      Comment[]
  managesGroups Group[]         @relation("ManagerOfGroups")
  likedPhotos   Likes[]
  photos        Photo[]         @relation("UploadedPhotos")
  groups        UsersInGroups[]
}

model UsersInGroups {
  userId  Int
  groupId Int
  group   Group @relation(fields: [groupId], references: [id])
  user    User  @relation(fields: [userId], references: [id])

  @@id([userId, groupId])
  @@index([groupId], map: "UsersInGroups_groupId_fkey")
}

model Photo {
  id         Int              @id @default(autoincrement())
  name       String
  description String?
  url        String
  numOfLikes Int              @default(0)
  date       DateTime         @default(now())
  uploaderId Int
  comments   Comment[]
  likedBy    Likes[]
  uploader   User             @relation("UploadedPhotos", fields: [uploaderId], references: [id])
  groups     PhotosInGroups[]
  tags       TagsOnPhotos[]

  @@index([uploaderId], map: "Photo_uploaderId_fkey")
}

model Likes {
  userId  Int
  photoId Int
  photo   Photo @relation(fields: [photoId], references: [id])
  user    User  @relation(fields: [userId], references: [id])

  @@id([userId, photoId])
  @@index([photoId], map: "Likes_photoId_fkey")
}

model Tag {
  id      Int            @id @default(autoincrement())
  content String
  photos  TagsOnPhotos[]
}

model Comment {
  id       Int    @id @default(autoincrement())
  content  String
  photoId  Int
  authorId Int
  author   User   @relation(fields: [authorId], references: [id])
  photo    Photo  @relation(fields: [photoId], references: [id])

  @@index([authorId], map: "Comment_authorId_fkey")
  @@index([photoId], map: "Comment_photoId_fkey")
}

model Group {
  id        Int              @id @default(autoincrement())
  name      String
  managerId Int
  manager   User             @relation("ManagerOfGroups", fields: [managerId], references: [id])
  photos    PhotosInGroups[]
  users     UsersInGroups[]

  @@index([managerId], map: "Group_managerId_fkey")
}

model PhotosInGroups {
  photoId Int
  groupId Int
  group   Group @relation(fields: [groupId], references: [id])
  photo   Photo @relation(fields: [photoId], references: [id])

  @@id([photoId, groupId])
  @@index([groupId], map: "PhotosInGroups_groupId_fkey")
}

model TagsOnPhotos {
  tagId   Int
  photoId Int
  photo   Photo @relation(fields: [photoId], references: [id])
  tag     Tag   @relation(fields: [tagId], references: [id])

  @@id([tagId, photoId])
  @@index([photoId], map: "TagsOnPhotos_photoId_fkey")
}

enum Role {
  USER
  LOGGED_USER
  MODERATOR
  ADMIN
}
